import groovy.xml.XmlSlurper
import groovy.xml.MarkupBuilder

def property(String key) { return project.findProperty(key).toString() }

static def definedInPluginXml(String key) {
    File pluginXmlFile = new File('src/main/resources/META-INF/plugin.xml')
    def idea = new XmlSlurper().parse(pluginXmlFile)
    return idea."$key"
}

plugins {
    id 'org.jetbrains.intellij' version '1.16.0'
    id 'groovy'
    id 'java'
    id 'org.jetbrains.changelog' version '1.2.1'
}

apply plugin: 'org.jetbrains.changelog'

repositories {
    mavenCentral()
}

dependencies {
   implementation 'org.apache.groovy:groovy:4.0.13'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
    testImplementation platform('org.junit:junit-bom:5.8.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    type = 'IC'
    version = '2023.2'
//    version = 'LATEST-EAP-SNAPSHOT'
    plugins = [
//               'JavaScript', Seulement dans la version ultimate.. C'est pÃ©nible
               'com.intellij.java',
               'org.intellij.groovy',
               'org.intellij.intelliLang'
    ]
}

/**
 * Refreshes the plugin.xml file for deployment
 */
String ideaMinVersion = property("ideaMinVersion")
String ideaMaxVersion = property("ideaMaxVersion")
String pluginVersion = property("version")
patchPluginXml {
    changeNotes = changelog.get(pluginVersion).toHTML()
    version = pluginVersion
    sinceBuild = ideaMinVersion
    untilBuild = ideaMaxVersion
}

test {
    systemProperty("idea.home.path", new File("${projectDir}/../").absolutePath)
    useJUnitPlatform()
    filter {
        includeTestsMatching "fr.nereide.*"
    }
}

tasks {
    runIde {
        jvmArgs("-Xmx2048m")
    }
}

/**
 * Config for changelog Plugin
 */
changelog {
    itemPrefix = "-"
    keepUnreleasedSection = false
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

/**
 * Generates the updatePlugin.xml files used for the repo.
 */
task generateUpdatePluginXml {
    // clean file if already exists
    if (file('updatePlugins.xml')) {
        task cleanPluginsFile(type: Delete) {
            delete 'updatePlugins.xml'
        }
    }
    file("updatePlugins.xml").withWriter { writer ->
        def xml = new MarkupBuilder(writer)
        // Leave file comment
        xml.doubleQuotes = true
        xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')

        xml.plugins {
            mkp.yield('\n  ')
            mkp.comment("AUTO-GENERATED FILE")
            mkp.yieldUnescaped("""
    <plugin id="${definedInPluginXml('id')}" url="${property("downloadUrl")}${property('name')}-${property("version")}.zip" version="${property("version")}">
        <idea-version since-build="${property("ideaMinVersion")}" until-build="${property("ideaMaxVersion")}"/>
        <name>${definedInPluginXml('name')}</name>
        <description>${definedInPluginXml('description')}</description>
        <change-notes>${changelog.get(pluginVersion).toHTML()}</change-notes>
    </plugin>""")
            mkp.yield('\n  ')
        }
    }
}

/**
 * Adds tests on build
 */
buildPlugin {
    dependsOn 'test'
    dependsOn 'generateUpdatePluginXml'
    tasks.findByName('generateUpdatePluginXml').mustRunAfter 'patchPluginXml'
}
