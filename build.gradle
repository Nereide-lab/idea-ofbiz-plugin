import groovy.xml.*

def property(String key) { return project.findProperty(key).toString() }

plugins {
    id 'org.jetbrains.intellij' version '1.1.4'
    id 'groovy'
    id 'java'
    id 'org.jetbrains.changelog' version '1.2.1'
}

apply plugin: 'org.jetbrains.changelog'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.5.14'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version = '2021.2'
    plugins = ['java', 'com.intellij.java', 'org.intellij.groovy']
}

/**
 * Refreshes the plugin.xml file for deployment
 */
String pluginVersion = property("version")
patchPluginXml {
    changeNotes = changelog.get(pluginVersion).toHTML()
    version = pluginVersion
}

test {
    useJUnitPlatform()
}

tasks {
    runIde {
        jvmArgs("-Xmx2048m")
    }
}

/**
 * Config for changelog Plugin
 */
changelog {
    itemPrefix = "-"
    keepUnreleasedSection = false
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

/**
 * Generates the updatePlugin.xml files used for the repo.
 */
task generateUpdatePluginXml {
    doLast {
        // clean file if already exists
        if (file('updatePlugins.xml')) {
            task cleanPluginsFile(type: Delete) {
                logger.log(LogLevel.WARN, "ON EFFACE")
                delete 'updatePlugins.xml'
            }
        }
        file("updatePlugins.xml").withWriter { writer ->
            // Create MarkupBuilder with 4 space indent
            def xml = new MarkupBuilder(writer)

            // Leave file comment
            xml.doubleQuotes = true
            xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')

            xml.plugins {
                mkp.yield('\n  ')
                mkp.comment("AUTO-GENERATED FILE")

                // TODO : url
                plugin('id': property("pluginId"), 'url': 'TODO', 'version': property("version")) {
                    'name'(property("pluginName"))
                    // TODO : description
                    xml.'description'('trololololololololololo')
                    'change-notes'( changelog.get(pluginVersion).toHTML() )
                    'idea-version'('since-build': property("ideaMinVersion"), 'until-build': property("ideaMaxVersion"))
                }
            }
        }
    }
}
