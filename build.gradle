import groovy.xml.XmlSlurper
import groovy.xml.MarkupBuilder

def property(String key) { return project.findProperty(key).toString() }

static def definedInPluginXml(String key) {
    File pluginXmlFile = new File('src/main/resources/META-INF/plugin.xml')
    def idea = new XmlSlurper().parse(pluginXmlFile)
    return idea."$key"
}

plugins {
    id 'org.jetbrains.intellij' version '1.1.4'
    id 'groovy'
    id 'java'
    id 'org.jetbrains.changelog' version '1.2.1'
}

apply plugin: 'org.jetbrains.changelog'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.5.14'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version = '2021.2'
    plugins = ['java', 'com.intellij.java', 'org.intellij.groovy']
}

/**
 * Refreshes the plugin.xml file for deployment
 */
String pluginVersion = property("version")
patchPluginXml {
    changeNotes = changelog.get(pluginVersion).toHTML()
    version = pluginVersion
}

test {
    useJUnit()
    filter{
        includeTestsMatching "org.apache.ofbiz.*"
    }
}

tasks {
    runIde {
        jvmArgs("-Xmx2048m")
    }
}

/**
 * Config for changelog Plugin
 */
changelog {
    itemPrefix = "-"
    keepUnreleasedSection = false
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

/**
 * Generates the updatePlugin.xml files used for the repo.
 */
task generateUpdatePluginXml {
    // clean file if already exists
    if (file('updatePlugins.xml')) {
        task cleanPluginsFile(type: Delete) {
            delete 'updatePlugins.xml'
        }
    }
    file("updatePlugins.xml").withWriter { writer ->
        def xml = new MarkupBuilder(writer)
        // Leave file comment
        xml.doubleQuotes = true
        xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')

        xml.plugins {
            mkp.yield('\n  ')
            mkp.comment("AUTO-GENERATED FILE")
            mkp.yieldUnescaped("""
    <plugin id="${definedInPluginXml('id')}" url="${property("downloadUrl")}${definedInPluginXml('name')}-${property("version")}.zip" version="${property("version")}">
        <idea-version since-build="${property("ideaMinVersion")}" until-build="${property("ideaMaxVersion")}"/>
        <name>${definedInPluginXml('name')}</name>
        <description>${definedInPluginXml('description')}</description>
        <change-notes>${changelog.get(pluginVersion).toHTML()}</change-notes>
    </plugin>""")
            mkp.yield('\n  ')
        }
    }
}

/**
 * Adds tests on build
 */
buildPlugin {
    dependsOn 'test'
    dependsOn 'generateUpdatePluginXml'
    tasks.findByName('generateUpdatePluginXml').mustRunAfter 'patchPluginXml'
}